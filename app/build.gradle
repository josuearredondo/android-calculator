apply plugin: 'com.android.application'

// Sonar runner reports for standard unit tests
apply plugin: 'sonar-runner'

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://localhost:9000" // Address of Sonar server
        property "sonar.sources", "src" // Sources
        property "sonar.projectName", "Calculator" // Calculator
        property "sonar.projectVersion", "0.2-SNAPSHOT" // Version of your project
        property "sonar.projectDescription", "Calculator project analyse" // Description of your project
        property "sonar.profile", "Android Lint" // To use the profile Android Lint
        property "sonar.import_unknown_files", true // To allow Sonar to verify the XML's fil
    }
}
android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"
    defaultConfig {
        applicationId "com.josue.calculator"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'

    testCompile 'junit:junit:4.12'
}

// Jacoco coverage reports for standard unit tests
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.6.201602180812"
}
task createDebugUnitTestCoverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco test coverage report from data gathered during unit tests"
    reports {
        xml {
            enabled = true
            destination "${buildDir}/reports/unit-coverage/debug/report.xml"
        }
        html {
            enabled = true
            destination "${buildDir}/reports/unit-coverage/debug/"
        }
    }
    sourceDirectories = getSourceDirs()
    classDirectories = getClassDirs()
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}
task createFullDebugCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'connectedDebugAndroidTest']) {
    group = "Reporting"
    description = "Generate full Jacoco test coverage report"
    reports {
        xml {
            enabled = true
            destination "${buildDir}/reports/full-coverage/debug/report.xml"
        }
        html {
            enabled = true
            destination "${buildDir}/reports/full-coverage/debug/"
        }
    }
    sourceDirectories = getSourceDirs()
    classDirectories = getClassDirs()
    executionData = files("${buildDir}/outputs/code-coverage/connected/coverage.ec", "${buildDir}/jacoco/testDebugUnitTest.exec")
}

def getSourceDirs() {
    files([
            'src/main/java',
            'src/debug/java'
    ])
}
def getClassDirs() {
    fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/*$$*', // Jacoco can not handle several "$" in class name.
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                       '**/*Dagger*.*', // Dagger auto-generated code.
                       '**/*MembersInjector*.*', // Dagger auto-generated code.
                       '**/*_Provide*Factory*.*', // Dagger auto-generated code.
                       'com/android/**/*.class']
    )
}